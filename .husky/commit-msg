#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

commit_message_file="$1"
commit_message=$(cat "$commit_message_file")

echo "Commit message: $commit_message"

# Add your validation logic here
if [ -z "$commit_message" ]; then
  echo "Error: Commit message cannot be empty"
  exit 1
fi

# set up env
python3 -m venv venv
source venv/bin/activate

# Compare the contents of requirements.txt and .current_requirements.txt
check_requirements() {
  pip3 freeze > .current_requirements.txt

  if cmp -s .husky/requirements.txt .current_requirements.txt; then
    rm .current_requirements.txt
    return 0
  else
    rm .current_requirements.txt
    return 1
  fi
}

if ! check_requirements; then
  pip3 install -r .husky/requirements.txt
fi

# checks repo for an issue matching the one referenced in commit message
python .husky/validate-issue.py --message "$commit_message"

# check conventional commits
if ! head -1 "$commit_message_file" | grep -qE "^(feat|fix|chore|docs|test|style|refactor|perf|build|ci|revert)(\(.+?\))?: .{1,}$"; then
    echo "Aborting commit. Your commit message is invalid." >&2
    exit 1
fi
if ! head -1 "$commit_message_file" | grep -qE "^.{1,88}$"; then
    echo "Aborting commit. Your commit message is too long." >&2
    exit 1
fi